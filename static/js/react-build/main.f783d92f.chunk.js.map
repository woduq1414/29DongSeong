{"version":3,"sources":["components/Choices/Choices.js","App.js","reportWebVitals.js","index.js"],"names":["Choices","word","num","onClick","Box","styled","div","App","useState","answerNum","setAnswerNum","qNumArr","setQNumArr","end","setEnd","qCnt","setQCnt","correct","setCorrect","res","setRes","shuffle","array","i","length","j","Math","floor","random","getRandomIntInclusive","min","max","ceil","checkAnswer","choosed","a","resTemp","slice","push","wdata","wset","words","console","log","temp","meanings","useEffect","arr","afunc","FlexWrapper","FlexContainer","Text","Meaning","ResBlock","props","color","map","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f783d92f.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nfunction Choices({word, num, onClick}) {\r\n\r\n    const colorTable = ['#fcc671', '#91b7f4', '#d59090', '#efbaf4', '#9ef2eb'];\r\n    \r\n    const Box = styled.div`\r\n        width: 250px;\r\n        height: 80px;\r\n        font-size: 2rem;\r\n        background-color: ${colorTable[num % 5]};\r\n        border: 1px solid grey;\r\n        text-align: center;\r\n        line-height: 80px;\r\n        margin-right: 30px;\r\n        margin-top: 20px;\r\n    `;\r\n\r\n    return (\r\n        <Box onClick={() => onClick(num)}>{word}</Box>\r\n    );\r\n}\r\n\r\nexport default Choices;","import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport Choices from './components/Choices';\nimport wdata from './word.json';\n\nfunction App() {\n    \n    const [answerNum, setAnswerNum] = useState(0);\n    const [qNumArr, setQNumArr] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const [end, setEnd] = useState(false);\n    const [qCnt, setQCnt] = useState(0);\n    const [correct, setCorrect] = useState(0);\n    const [res, setRes] = useState([]);\n\n    const shuffle = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    const getRandomIntInclusive = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min; //최댓값도 포함, 최솟값도 포함\n    }\n\n    const checkAnswer = async (choosed) => {\n      if (choosed === answerNum) {\n          let resTemp = res.slice();\n          resTemp.push([1, wdata.wset[qNumArr[qCnt]].words[choosed], wdata.wset[qNumArr[qCnt]].words[answerNum]]);\n          setCorrect(correct+1);\n          setRes(resTemp);\n      } else {\n          let resTemp = res.slice();\n          resTemp.push([0, wdata.wset[qNumArr[qCnt]].words[choosed], wdata.wset[qNumArr[qCnt]].words[answerNum]]);\n          setRes(resTemp);\n      }\n      console.log(correct, res);\n      if (qCnt === 10) {\n          setEnd(true);\n          return 0;\n      }\n      await setAnswerNum(getRandomIntInclusive(0, wdata.wset[qNumArr[qCnt+1]].words.length-1));\n      let temp = getRandomIntInclusive(0, wdata.wset[qNumArr[qCnt+1]].words.length-1);\n      while (wdata.wset[qNumArr[qCnt+1]].meanings[temp] === \"X\") {\n          console.log('loop', temp);\n          temp = getRandomIntInclusive(0, wdata.wset[qNumArr[qCnt+1]].words.length-1);\n      }\n      await setAnswerNum(temp);\n      await setQCnt(qCnt+1);\n    }\n\n    useEffect( () => {\n        const afunc = async () => {\n            let arr = qNumArr.slice();\n            shuffle(arr)\n            await setQNumArr(arr);\n            let temp = getRandomIntInclusive(0, wdata.wset[qNumArr[0]].words.length-1);\n            console.log(wdata.wset[qNumArr[0]].meanings[temp], wdata.wset[qNumArr[0]].meanings[temp] === \"X\");\n            while (wdata.wset[qNumArr[0]].meanings[temp] === \"X\") {\n                console.log('loop', temp)\n                temp = getRandomIntInclusive(0, wdata.wset[qNumArr[0]].words.length-1);\n            }\n            await setAnswerNum(temp);\n        }\n        afunc();\n    // eslint-disable-next-line\n    }, [end]);\n\n    const FlexWrapper = styled.div`\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        overflow-y: auto;\n    `;\n\n    const FlexContainer = styled.div`\n        display: flex;\n        justify-content: center;\n        margin-top: 30px;\n        flex-wrap: wrap;\n    `;\n\n    const Text = styled.div`\n        font-size: 2.5rem;\n    `;\n\n    const Meaning = styled.div`\n        width: 40vw;\n        height: 70px;\n        background-color: white;\n        border: 1.5px solid grey;\n        font-size: 2rem;\n        text-align: center;\n        line-height: 70px;\n    `;\n\n    const ResBlock = styled.div`\n        width: 30vw;\n        background-color: white;\n        border: 1.5px solid ${props => props.color};\n        border-radius: 25px;\n        font-size: 1rem;\n        text-align: center;\n        padding: 7px 10px 7px 10px;\n        margin-right: 20px;\n        margin-top: 20px;\n    `;\n\n    return (\n      <> \n          <FlexWrapper>\n              {!end ? (<>\n              <Text>다음 뜻을 가진 단어를 골라주세요!</Text>\n              <Meaning>\"{wdata.wset[qNumArr[qCnt]].meanings[answerNum]}\"</Meaning>\n              <FlexContainer>\n                  {wdata.wset[qNumArr[qCnt]].words.map((i, idx) => {\n                      return <Choices word={i} num={idx} onClick={checkAnswer} key={idx} />\n                  })}\n              </FlexContainer></>) : (\n                  <>\n                    {res.map((i, idx) => {\n                        return <ResBlock color={i[0] === 1 ? 'blue' : 'red'}>선택한 답: {i[1]}, 실제 정답: {i[2]}</ResBlock>\n                    })}\n                    <div>맞춘 개수: {correct}/11</div>\n                    <button onClick={() => {setEnd(false); setCorrect(0); setRes([]); setQCnt(0)}}>다시하기</button>\n                  </>\n              )\n              }\n          </FlexWrapper>\n      </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}